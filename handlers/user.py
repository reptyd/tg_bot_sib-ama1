from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import OPERATOR_IDS
from ticket_db import create_ticket

router = Router()

class Ticket(StatesGroup):
    category = State()
    question = State()

@router.message(F.text.lower() == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="cat_common")],
        [InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data="cat_payment")],
        [InlineKeyboardButton(text="–ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞", callback_data="cat_quality")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=kb)

@router.message(F.text.lower() == "/help")
async def help_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start ‚Äî –Ω–∞—á–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚Ä¢ –î–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç."
    )

@router.callback_query(F.data.startswith("cat_"))
async def set_category(call: CallbackQuery, state: FSMContext):
    category = call.data.replace("cat_", "")
    await state.update_data(category=category)
    await call.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.")
    await state.set_state(Ticket.question)
    await call.answer()

@router.message(Ticket.question, F.text | F.photo)
async def get_question(message: Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    text = message.text or message.caption or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    photo = message.photo[-1].file_id if message.photo else None

    ticket = create_ticket(
        user_id=message.from_user.id,
        username=message.from_user.username,
        category=category,
        text=text,
        photo=photo
    )

    caption = (
        f"<b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ticket['category']}\n"
        f"–û—Ç: @{ticket['username'] or '–ë–µ–∑ username'}\n"
        f"ID —Ç–∏–∫–µ—Ç–∞: {ticket['id']}\n\n"
        f"{ticket['text']}"
    )

    reply_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket['id']}")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{ticket['id']}")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ticket['id']}")]
    ])

    for admin_id in OPERATOR_IDS:
        if photo:
            await message.bot.send_photo(admin_id, photo=photo, caption=caption, reply_markup=reply_markup)
        else:
            await message.bot.send_message(admin_id, caption, reply_markup=reply_markup)

    await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()
